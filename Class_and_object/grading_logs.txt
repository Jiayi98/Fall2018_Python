Here is the testing output. This includes any manual comments. If you have any questions feel free to contact me.


Detailed error traces are below the testing log.
test_additional_item_type (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_alternate_tax (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_applicable_tax (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_drink_attr (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_drink_init (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_drink_prop (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_food_attr (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_food_init (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_food_prop (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_grouporder_init (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_grouporder_items (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_grouporder_price_over (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_grouporder_price_under (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_grouporder_super_use (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_item_menu (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_menu_add_items (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_menu_add_items2 (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_menu_init (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_menu_items (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_menu_items_copy (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_order_init (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_order_items (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_order_large (assignment3_grader.Assignment3Grader) (Weight: 2.00) ...
ok
test_order_price (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_order_small (assignment3_grader.Assignment3Grader) (Weight: 2.00) ...
ok
test_tax_attributes (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_tax_attributes_class (assignment3_grader.Assignment3Grader) (Weight: 3.04) ...
ok
test_za_code_quality_GroupOrder (assignment3_grader.Assignment3Grader) (Weight: 5.00) ...
Examining class GroupOrder (line #111 in ./zhoujiayi_4151694_46777130_assignment3.py)
==========
Is the code clean and easy to read? (weight 5)
Yes.

ok
You were given 5.00 points for this result.
test_za_code_quality_Item (assignment3_grader.Assignment3Grader) (Weight: 5.00) ...
Examining class Item (line #126 in ./zhoujiayi_4151694_46777130_assignment3.py)
==========
Is the code clean and easy to read? (weight 5)
Yes.

ok
You were given 5.00 points for this result.
test_za_code_quality_Menu (assignment3_grader.Assignment3Grader) (Weight: 5.00) ...
Examining class Menu (line #17 in ./zhoujiayi_4151694_46777130_assignment3.py)
==========
Is the code clean and easy to read? (weight 5)
-2 You declare items twice. Luckily for you the correct one is second and that's the one that gets used.
ok
You were given 3.00 points for this result.
test_za_code_quality_Order (assignment3_grader.Assignment3Grader) (Weight: 5.00) ...
Examining class Order (line #61 in ./zhoujiayi_4151694_46777130_assignment3.py)
==========
Is the code clean and easy to read? (weight 5)
-1 Use true-ish-ness of iterables with values in them to check if an iterable has values in it.
-0.5 No need for total = 0
-2 Multiple branches of the if are the same. Why not use an "or"?

FAIL
You were given 1.50 points for this result.
test_zz_general_comments (assignment3_grader.Assignment3Grader) (Weight: 0.00) ...
Examining module zhoujiayi_4151694_46777130_assignment3 (line #0 in ./zhoujiayi_4151694_46777130_assignment3.py)
==========
Other comments and adjustments (weight 0)
No overall comments.

ok
You were given 0.00 points for this result.

======================================================================
FAIL: test_za_code_quality_Order (assignment3_grader.Assignment3Grader)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/amp/shared/UTexas/Python/tests/assignment3_grader.py", line 33, in test_za_code_quality_Order
    self.askSource(assignment3.Order, "Is the code clean and easy to read?")
  File "/home/amp/shared/UTexas/Python/tests/grader.py", line 208, in askSource
    src, "Examining " + exhibit_desc, fn)
  File "/home/amp/shared/UTexas/Python/tests/grader.py", line 164, in ask
    self.fail("{}: {}".format(question, reply))
AssertionError: Is the code clean and easy to read? (weight 5): -1 Use true-ish-ness of iterables with values in them to check if an iterable has values in it.
-0.5 No need for total = 0
-2 Multiple branches of the if are the same. Why not use an "or"?


----------------------------------------------------------------------
Ran 32 tests in 90.234s

FAILED (failures=1)

Here is the output of the PyCodeStyle/PEP8 checker (showing the first instance of each issue).
This is does not effect your grade ON THIS ASSIGNMENT. However, I may add it as a grading criteria.

./zhoujiayi_4151694_46777130_assignment3.py:42:80: E501 line too long (111 > 79 characters)
        Return: True if the item was added, and False it was not (because it had already been assigned a menu).
                                                                               ^
    Limit all lines to a maximum of 79 characters.

    There are still many devices around that are limited to 80 character
    lines; plus, limiting windows to 80 characters makes it possible to have
    several windows side-by-side.  The default wrapping on such devices looks
    ugly.  Therefore, please limit all lines to a maximum of 79 characters.
    For flowing long blocks of text (docstrings or comments), limiting the
    length to 72 characters is recommended.

    Reports error E501.
./zhoujiayi_4151694_46777130_assignment3.py:123:47: E201 whitespace after '('
        return super().price_plus_tax_and_tip( amount if amount > 0.2 else 0.2)
                                              ^
    Avoid extraneous whitespace.

    Avoid extraneous whitespace in these situations:
    - Immediately inside parentheses, brackets or braces.
    - Immediately before a comma, semicolon, or colon.

    Okay: spam(ham[1], {eggs: 2})
    E201: spam( ham[1], {eggs: 2})
    E201: spam(ham[ 1], {eggs: 2})
    E201: spam(ham[1], { eggs: 2})
    E202: spam(ham[1], {eggs: 2} )
    E202: spam(ham[1 ], {eggs: 2})
    E202: spam(ham[1], {eggs: 2 })

    E203: if x == 4: print x, y; x, y = y , x
    E203: if x == 4: print x, y ; x, y = y, x
    E203: if x == 4 : print x, y; x, y = y, x
1       E201 whitespace after '('
1       E501 line too long (111 > 79 characters)
